import React, { useState } from "react";
import { motion } from "framer-motion";
import { useForm } from "react-hook-form";
import { Calendar, Clock, User, Phone, Mail, MapPin } from "lucide-react";
import { supabase } from "../lib/supabase";

interface BookingForm {
  fullName: string;
  email: string;
  phone: string;
  service: string;
  preferredDate: string;
  preferredTime: string;
  notes?: string;
}

const BookingPage: React.FC = () => {
  // Use environment variable for default clinic ID for public bookings
  const DEFAULT_CLINIC_ID = import.meta.env.VITE_CLINIC_ID || '';
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<BookingForm>();

  const services = [
    "General Checkup & Cleaning",
    "Cosmetic Consultation",
    "Dental Implant Consultation",
    "Emergency Appointment",
    "Teeth Whitening",
    "Orthodontic Consultation",
    "Root Canal Treatment",
    "Periodontal Treatment",
  ];

  const timeSlots = [
    "9:00 AM",
    "9:30 AM",
    "10:00 AM",
    "10:30 AM",
    "11:00 AM",
    "11:30 AM",
    "2:00 PM",
    "2:30 PM",
    "3:00 PM",
    "3:30 PM",
    "4:00 PM",
    "4:30 PM",
    "5:00 PM",
  ];

  const onSubmit = async (data: BookingForm): Promise<void> => {
    setIsLoading(true);
    setError("");

    try {
      // First, create or find the patient
      let patientId: string;

      // Check if patient already exists
      const { data: existingPatients } = await supabase
        .from("patients")
        .select("id")
        .eq("email", data.email)
        .eq("clinic_id", DEFAULT_CLINIC_ID);
      
      const existingPatient = existingPatients && existingPatients.length > 0 ? existingPatients[0] : null;

      if (existingPatient) {
        patientId = existingPatient.id;
      } else {
        // Create new patient (patient_code auto-generated by DB trigger)
        const { data: newPatient, error: patientError } = await supabase
          .from("patients")
          .insert({
            full_name: data.fullName,
            email: data.email,
            phone: data.phone && data.phone.length >= 10 ? data.phone : null,
            clinic_id: DEFAULT_CLINIC_ID,
          })
          .select("id")
          .single();

        if (patientError) throw patientError;
        patientId = newPatient.id;
      }

      // Create the appointment
      const { error: appointmentError } = await supabase
        .from("appointments")
        .insert({
          patient_id: patientId,
          service: data.service,
          appointment_date: data.preferredDate,
          appointment_time: data.preferredTime,
          notes: data.notes || null,
          status: "scheduled",
          clinic_id: DEFAULT_CLINIC_ID,
        });

      if (appointmentError) throw appointmentError;

      setIsSubmitted(true);
      reset();

      // Open WhatsApp with booking details
      const whatsappMessage = `Hi! I've booked an appointment:

Name: ${data.fullName}
Service: ${data.service}
Date: ${data.preferredDate}
Time: ${data.preferredTime}
Phone: ${data.phone}
Email: ${data.email}${
        data.notes
          ? `
Notes: ${data.notes}`
          : ""
      }`;

      const whatsappURL = `https://wa.me/919952205380?text=${encodeURIComponent(
        whatsappMessage
      )}`;
      window.open(whatsappURL, "_blank");
    } catch (err: any) {
      console.error("Booking error:", err);
      setError(err.message || "Failed to book appointment. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  if (isSubmitted) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
          className="max-w-md w-full bg-white rounded-lg shadow-xl p-8 text-center"
        >
          <div className="bg-green-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-6">
            <svg
              className="w-8 h-8 text-green-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M5 13l4 4L19 7"
              />
            </svg>
          </div>
          <h2 className="text-2xl font-bold text-gray-900 mb-4">
            Booking Confirmed!
          </h2>
          <p className="text-gray-600 mb-6">
            Thank you for booking with Dr.G.M's Dentistree. WhatsApp will open
            to send your booking details to our clinic.
          </p>
          <button
            onClick={() => setIsSubmitted(false)}
            className="w-full bg-gradient-to-r from-primary-500 to-teal-500 text-white py-3 px-4 rounded-lg font-semibold hover:from-primary-600 hover:to-teal-600 transition-all duration-200"
          >
            Book Another Appointment
          </button>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="text-center mb-12"
        >
          <h1 className="text-3xl lg:text-4xl font-heading font-bold text-gray-900 mb-4">
            Book Your Appointment
          </h1>
          <p className="text-xl text-gray-600">
            Schedule your visit with our experienced dental team
          </p>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Contact Info */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="bg-white rounded-xl shadow-lg p-6"
          >
            <h3 className="text-xl font-semibold text-gray-900 mb-6">
              Contact Information
            </h3>

            <div className="space-y-4">
              <div className="flex items-center space-x-3">
                <div className="bg-primary-100 p-2 rounded-full">
                  <Phone className="h-5 w-5 text-primary-600" />
                </div>
                <div>
                  <p className="font-medium text-gray-900">09952205380</p>
                  <p className="text-sm text-gray-600">Emergency Line</p>
                </div>
              </div>

              <div className="flex items-center space-x-3">
                <div className="bg-teal-100 p-2 rounded-full">
                  <Mail className="h-5 w-5 text-teal-600" />
                </div>
                <div>
                  <p className="font-medium text-gray-900">
                    dr.gmsdentistree@gmail.com
                  </p>
                  <p className="text-sm text-gray-600">General Inquiries</p>
                </div>
              </div>

              <div className="flex items-center space-x-3">
                <div className="bg-coral-100 p-2 rounded-full">
                  <MapPin className="h-5 w-5 text-coral-600" />
                </div>
                <div>
                  <p className="font-medium text-gray-900">
                    No4, vasantham nagar, kappi kadai, near PPG institute of
                    technology,
                  </p>
                  <p className="text-sm text-gray-600">
                    Coimbatore, Tamil Nadu 641035
                  </p>
                </div>
              </div>

              <div className="flex items-center space-x-3">
                <div className="bg-primary-100 p-2 rounded-full">
                  <Clock className="h-5 w-5 text-primary-600" />
                </div>
                <div>
                  <p className="font-medium text-gray-900">Mon-Fri: 8AM-6PM</p>
                  <p className="text-sm text-gray-600">Sat: 9AM-3PM</p>
                </div>
              </div>
            </div>

            <div className="mt-8 p-4 bg-gradient-to-r from-primary-50 to-teal-50 rounded-lg">
              <h4 className="font-semibold text-gray-900 mb-2">Need Help?</h4>
              <p className="text-sm text-gray-600 mb-3">
                Our team is available 24/7 for emergency dental care.
              </p>
              <button className="text-sm font-medium text-primary-600 hover:text-primary-700">
                Start Live Chat â†’
              </button>
            </div>
          </motion.div>

          {/* Booking Form */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.4 }}
            className="lg:col-span-2 bg-white rounded-xl shadow-lg p-8"
          >
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              {error && (
                <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg text-sm">
                  {error}
                </div>
              )}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Full Name *
                  </label>
                  <div className="relative">
                    <User className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
                    <input
                      {...register("fullName", {
                        required: "Full name is required",
                      })}
                      type="text"
                      className="w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                      placeholder="Enter your full name"
                    />
                  </div>
                  {errors.fullName && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.fullName.message}
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email Address *
                  </label>
                  <div className="relative">
                    <Mail className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
                    <input
                      {...register("email", {
                        required: "Email is required",
                        pattern: {
                          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                          message: "Invalid email address",
                        },
                      })}
                      type="email"
                      className="w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                      placeholder="Enter your email"
                    />
                  </div>
                  {errors.email && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.email.message}
                    </p>
                  )}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Phone Number *
                </label>
                <div className="relative">
                  <Phone className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
                  <input
                    {...register("phone", {
                      required: "Phone number is required",
                      minLength: {
                        value: 10,
                        message: "Phone number must be at least 10 digits"
                      }
                    })}
                    type="tel"
                    className="w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                    placeholder="09952205380"
                  />
                </div>
                {errors.phone && (
                  <p className="mt-1 text-sm text-red-600">
                    {errors.phone.message}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Service Type *
                </label>
                <select
                  {...register("service", {
                    required: "Please select a service",
                  })}
                  className="w-full px-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                >
                  <option value="">Select a service</option>
                  {services.map((service) => (
                    <option key={service} value={service}>
                      {service}
                    </option>
                  ))}
                </select>
                {errors.service && (
                  <p className="mt-1 text-sm text-red-600">
                    {errors.service.message}
                  </p>
                )}
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Preferred Date *
                  </label>
                  <div className="relative">
                    <Calendar className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
                    <input
                      {...register("preferredDate", {
                        required: "Please select a date",
                      })}
                      type="date"
                      min={new Date().toISOString().split("T")[0]}
                      className="w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                    />
                  </div>
                  {errors.preferredDate && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.preferredDate.message}
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Preferred Time *
                  </label>
                  <div className="relative">
                    <Clock className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
                    <select
                      {...register("preferredTime", {
                        required: "Please select a time",
                      })}
                      className="w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                    >
                      <option value="">Select time</option>
                      {timeSlots.map((time) => (
                        <option key={time} value={time}>
                          {time}
                        </option>
                      ))}
                    </select>
                  </div>
                  {errors.preferredTime && (
                    <p className="mt-1 text-sm text-red-600">
                      {errors.preferredTime.message}
                    </p>
                  )}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Additional Notes
                </label>
                <textarea
                  {...register("notes")}
                  rows={4}
                  className="w-full px-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  placeholder="Any specific concerns or requests?"
                />
              </div>

              <button
                type="submit"
                disabled={isLoading}
                className="w-full bg-gradient-to-r from-primary-500 to-teal-500 text-white py-4 px-6 rounded-lg font-semibold hover:from-primary-600 hover:to-teal-600 transition-all duration-200 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? "Booking..." : "Book Appointment"}
              </button>
            </form>
          </motion.div>
        </div>
      </div>
    </div>
  );
};

export default BookingPage;
