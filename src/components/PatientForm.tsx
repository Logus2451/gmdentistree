import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { X, Save } from 'lucide-react';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';
import { config } from '../config/clinic';

interface Patient {
  id?: string;
  salutation?: string;
  fullName: string;
  patientCode?: string;
  email?: string;
  phone: string;
  age?: number;
  gender?: string;

  aadharCard?: string;
  address?: string;
  dateOfBirth?: string;
  emergencyContact?: string;
  insuranceProvider?: string;
  insurancePolicyNumber?: string;
  allergies?: string;
  currentMedications?: string;
  dentalHistory?: string;
  preferredDentist?: string;
  lastVisitDate?: string;
  nextCleaningDue?: string;
}

interface PatientFormProps {
  patient?: Patient;
  isOpen: boolean;
  onClose: () => void;
  onSave: () => void;
}

const PatientForm: React.FC<PatientFormProps> = ({ patient, isOpen, onClose, onSave }) => {
  const { currentClinic } = useAuth();
  const [formData, setFormData] = useState<Patient>({
    salutation: '',
    fullName: '',
    patientCode: '',
    email: '',
    phone: '',
    age: 0,
    gender: '',

    aadharCard: '',
    address: '',
    dateOfBirth: '',
    emergencyContact: '',
    insuranceProvider: '',
    insurancePolicyNumber: '',
    allergies: '',
    currentMedications: '',
    dentalHistory: '',
    preferredDentist: '',
    lastVisitDate: '',
    nextCleaningDue: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    if (patient) {
      setFormData(patient);
    } else {
      // Reset form for new patient (patient_code will be auto-generated by DB trigger)
      setFormData({
        salutation: '',
        fullName: '',
        patientCode: 'Auto-generated',
        email: '',
        phone: '',
        age: 0,
        gender: '',
        aadharCard: '',
        address: '',
        dateOfBirth: '',
        emergencyContact: '',
        insuranceProvider: '',
        insurancePolicyNumber: '',
        allergies: '',
        currentMedications: '',
        dentalHistory: '',
        preferredDentist: '',
        lastVisitDate: '',
        nextCleaningDue: ''
      });
    }
  }, [patient]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!currentClinic?.id) {
      setError('No clinic selected');
      return;
    }
    
    setLoading(true);
    setError('');

    try {
      const patientData = {
        salutation: formData.salutation || null,
        full_name: formData.fullName,
        // patient_code will be auto-generated by DB trigger
        email: formData.email || null,
        phone: formData.phone,
        age: formData.age || null,
        gender: formData.gender || null,

        aadhar_card: formData.aadharCard || null,
        address: formData.address || null,
        date_of_birth: formData.dateOfBirth || null,
        emergency_contact: formData.emergencyContact || null,
        insurance_provider: formData.insuranceProvider || null,
        insurance_policy_number: formData.insurancePolicyNumber || null,
        allergies: formData.allergies || null,
        current_medications: formData.currentMedications || null,
        dental_history: formData.dentalHistory || null,
        preferred_dentist: formData.preferredDentist || null,
        last_visit_date: formData.lastVisitDate || null,
        next_cleaning_due: formData.nextCleaningDue || null,
        clinic_id: currentClinic.id
      };

      if (patient?.id) {
        // Update existing patient
        const { error } = await supabase
          .from('patients')
          .update(patientData)
          .eq('id', patient.id);
        
        if (error) throw error;
      } else {
        // Create new patient
        const { error } = await supabase
          .from('patients')
          .insert(patientData);
        
        if (error) throw error;
      }

      onSave();
      onClose();
    } catch (err: any) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto"
      >
        <div className="flex justify-between items-center p-6 border-b">
          <h2 className="text-2xl font-bold text-gray-900">
            {patient ? 'Edit Patient' : 'Add New Patient'}
          </h2>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <X className="h-6 w-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-4">
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-600 px-3 py-2 rounded-lg mb-4 text-sm">
              {error}
            </div>
          )}

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
            {/* Left Column - Basic Information */}
            <div className="space-y-4">
              {/* Basic Info */}
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                <h3 className="text-sm font-semibold text-blue-900 mb-3">Basic Information</h3>
                <div className="grid grid-cols-2 gap-3">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Salutation</label>
                    <select
                      value={formData.salutation}
                      onChange={(e) => setFormData({ ...formData, salutation: e.target.value })}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                    >
                      <option value="">Select</option>
                      <option value="Mr.">Mr.</option>
                      <option value="Mrs.">Mrs.</option>
                      <option value="Ms.">Ms.</option>
                      <option value="Dr.">Dr.</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Patient Code</label>
                    <input
                      type="text"
                      value={formData.patientCode || 'Auto-generated'}
                      disabled
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded bg-gray-100"
                    />
                  </div>
                </div>
                <div className="grid grid-cols-1 gap-3 mt-3">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Full Name *</label>
                    <input
                      type="text"
                      required
                      value={formData.fullName}
                      onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                    />
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-3 mt-3">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Phone *</label>
                    <input
                      type="tel"
                      required
                      value={formData.phone}
                      onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Email</label>
                    <input
                      type="email"
                      value={formData.email}
                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                    />
                  </div>
                </div>
                <div className="grid grid-cols-3 gap-3 mt-3">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Age</label>
                    <input
                      type="number"
                      value={formData.age || ''}
                      onChange={(e) => setFormData({ ...formData, age: parseInt(e.target.value) || 0 })}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Gender</label>
                    <select
                      value={formData.gender}
                      onChange={(e) => setFormData({ ...formData, gender: e.target.value })}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                    >
                      <option value="">Select</option>
                      <option value="Male">Male</option>
                      <option value="Female">Female</option>
                      <option value="Other">Other</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Date of Birth</label>
                    <input
                      type="date"
                      value={formData.dateOfBirth}
                      onChange={(e) => setFormData({ ...formData, dateOfBirth: e.target.value })}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                    />
                  </div>
                </div>
              </div>

              {/* Contact & Address */}
              <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                <h3 className="text-sm font-semibold text-green-900 mb-3">Contact & Address</h3>
                <div className="space-y-3">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Address</label>
                    <textarea
                      value={formData.address}
                      onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                      rows={2}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                    />
                  </div>
                  <div className="grid grid-cols-1 gap-3">
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">Emergency Contact</label>
                      <input
                        type="text"
                        value={formData.emergencyContact}
                        onChange={(e) => setFormData({ ...formData, emergencyContact: e.target.value })}
                        className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                        placeholder="Name and phone"
                      />
                    </div>
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">Aadhar Card</label>
                      <input
                        type="text"
                        value={formData.aadharCard}
                        onChange={(e) => setFormData({ ...formData, aadharCard: e.target.value })}
                        className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                        placeholder="XXXX XXXX XXXX"
                      />
                    </div>
                  </div>
                </div>
              </div>

              {/* Insurance */}
              <div className="bg-purple-50 border border-purple-200 rounded-lg p-3">
                <h3 className="text-sm font-semibold text-purple-900 mb-3">Insurance</h3>
                <div className="grid grid-cols-1 gap-3">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Provider</label>
                    <input
                      type="text"
                      value={formData.insuranceProvider}
                      onChange={(e) => setFormData({ ...formData, insuranceProvider: e.target.value })}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Policy Number</label>
                    <input
                      type="text"
                      value={formData.insurancePolicyNumber}
                      onChange={(e) => setFormData({ ...formData, insurancePolicyNumber: e.target.value })}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* Right Column - Medical Information */}
            <div className="space-y-4">
              {/* Medical Info */}
              <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                <h3 className="text-sm font-semibold text-red-900 mb-3">Medical Information</h3>
                <div className="space-y-3">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Allergies</label>
                    <textarea
                      value={formData.allergies}
                      onChange={(e) => setFormData({ ...formData, allergies: e.target.value })}
                      rows={2}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                      placeholder="List any known allergies"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Current Medications</label>
                    <textarea
                      value={formData.currentMedications}
                      onChange={(e) => setFormData({ ...formData, currentMedications: e.target.value })}
                      rows={2}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                      placeholder="List current medications"
                    />
                  </div>
                </div>
              </div>

              {/* Dental Info */}
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                <h3 className="text-sm font-semibold text-yellow-900 mb-3">Dental Information</h3>
                <div className="space-y-3">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Dental History</label>
                    <textarea
                      value={formData.dentalHistory}
                      onChange={(e) => setFormData({ ...formData, dentalHistory: e.target.value })}
                      rows={3}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                      placeholder="Previous procedures, treatments, etc."
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">Preferred Dentist</label>
                    <input
                      type="text"
                      value={formData.preferredDentist}
                      onChange={(e) => setFormData({ ...formData, preferredDentist: e.target.value })}
                      className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                    />
                  </div>
                  <div className="grid grid-cols-2 gap-3">
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">Last Visit</label>
                      <input
                        type="date"
                        value={formData.lastVisitDate}
                        onChange={(e) => setFormData({ ...formData, lastVisitDate: e.target.value })}
                        className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                      />
                    </div>
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">Next Cleaning</label>
                      <input
                        type="date"
                        value={formData.nextCleaningDue}
                        onChange={(e) => setFormData({ ...formData, nextCleaningDue: e.target.value })}
                        className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="flex justify-end space-x-3 pt-4 border-t mt-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-sm text-gray-600 hover:text-gray-800 transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={loading}
              className="flex items-center space-x-2 px-4 py-2 text-sm bg-primary-600 text-white rounded-lg hover:bg-primary-700 disabled:opacity-50 transition-colors"
            >
              <Save className="h-3 w-3" />
              <span>{loading ? 'Saving...' : 'Save Patient'}</span>
            </button>
          </div>
        </form>
      </motion.div>
    </div>
  );
};

export default PatientForm;